class Conta {
    constructor(public titular: string, public saldo: number) {
        this.validaValor(saldo)
    }

    private validaValor(valor: number): void {
        if (isNaN(valor) || valor <= 0) {
            throw new Error("Valor inválido: deve ser maior que zero e numérico.")
        }
    }

    sacar(valor: number): void {
        this.validaValor(valor)
        if (valor > this.saldo) {
            throw new Error(`Saldo insuficiente para sacar R$${valor}.`)
        }
        this.saldo -= valor;
    }

    depositar(valor: number): void {
        this.validaValor(valor)
        this.saldo += valor
    }

    transferir(valor: number, contaDestino: Conta): void {
        this.validaValor(valor)
        if (valor > this.saldo) {
            throw new Error(`Saldo insuficiente para transferir R$${valor}.`)
        }
        this.saldo -= valor
        contaDestino.saldo += valor
    }
}

class Banco {
    contas: Conta[] = []

    adicionarConta(conta: Conta): void {
        this.contas.push(conta)
    }

    transferir(titularOrigem: string, titularDestino: string, valor: number): void {
        const contaOrigem = this.contas.find(c => c.titular === titularOrigem)
        const contaDestino = this.contas.find(c => c.titular === titularDestino)

        if (!contaOrigem || !contaDestino) {
            throw new Error("Uma das contas não foi encontrada.")
        }

        contaOrigem.transferir(valor, contaDestino)
    }
}

class App {
    banco = new Banco()

    menu(): void {
        try {
            // Criação de contas com saldo inicial
            this.banco.adicionarConta(new Conta("Maria", 100))
            this.banco.adicionarConta(new Conta("João", 50))

            console.log("Depositando R$50 na conta de Maria...")
            this.banco.contas[0].depositar(50)

            console.log("Sacando R$200 da conta de Maria...")
            this.banco.contas[0].sacar(200)

            console.log("Transferindo R$50 de Maria para João...")
            this.banco.transferir("Maria", "João", 50)

            console.log("Depositando valor inválido...")
            this.banco.contas[1].depositar(-10)

        } catch (error) {
            console.error("Erro no menu:", (error as Error).message)
        }

        this.banco.contas.forEach(c => {
            console.log(`Titular: ${c.titular}, Saldo: R$${c.saldo}`)
        })
    }
}

const app = new App()
app.menu()
